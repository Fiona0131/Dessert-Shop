package dessert;

public abstract class DessertItem implements Comparable<DessertItem>{

 protected String name;

/**
 * Null constructor for DessertItem class
 */
  public DessertItem() {
    this("");
  }
/**
 * Initializes DessertItem data
 */
  public DessertItem(String name) {
      this.name = name;
      }
/**
 * Returns name of DessertItem
 * @return name of DessertItem
 */
  public String getName() {
    return name;
  }
/**
 * Returns cost of DessertItem
 * @return cost of DessertItem
 */
 
  /**
   * compare the cost of two objects
   * @param otherObject -  the second DessertItem object 
   * @return the difference in the cost between two objects
   */
  public int compareTo(DessertItem o) {
	  	if(getCost()>((DessertItem)o).getCost()) {
	  		return 1;
	  	}
	  	else if(getCost()<((DessertItem)o).getCost()) {
	  		return -1;
	  	}
	  	else
	  		return 0;
  }
 
  
  protected abstract double getCost();
/**
   * Compare the difference price between two objects
   * To find the object that has the higher cost
 * @param that - the second DessertItem object
 * @return 
 * @return 
 * @return 
   * @return the object that has higher cost
   */
  public static DessertItem max(DessertItem o1, DessertItem o2) {
	  if(((DessertItem)o1).compareTo(o2)>0) {
		  System.out.println( o1.getName()+" with $ "+o1.getCost()+" is lager than "+o2.getName()+" with $ "+o2.getCost());
	  }
	  else {
		  System.out.println( o2.getName()+" with $ "+o2.getCost()+" is lager than "+o1.getName()+" with $ "+o1.getCost());
	  }
	return null;  
}
  public String toString() {
	  return getName()+" cost "+getCost();
  }
}//end class

